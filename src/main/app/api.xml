<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:oauth2-provider="http://www.mulesoft.org/schema/mule/oauth2-provider" xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/oauth2-provider http://www.mulesoft.org/schema/mule/oauth2-provider/current/mule-oauth2-provider.xsd">
   
    <apikit:config name="api-config" raml="api.raml" consoleEnabled="false" doc:name="Router" />
  
    <api-platform-gw:api apiName="${api.name}" version="${api.version}" flowRef="api-main" create="true" apikitRef="api-config" doc:name="API Autodiscovery"/>
    <http:request-config name="identity-service" protocol="HTTPS" host="#[new URL('${http.external.service.baseUrl}').getHost()]" port="#[new URL('${http.external.service.baseUrl}').getPort()]" basePath="#[new URL('${http.external.service.baseUrl}').getPath()]" doc:name="HTTP Request Configuration"/>
        
    <flow name="api-main">
        <http:listener config-ref="api-httpListenerConfig" path="/api/*" doc:name="HTTP" />
        <apikit:router config-ref="api-config" doc:name="APIkit Router" />
        <exception-strategy ref="api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    
    <flow name="api-console">
        <http:listener config-ref="api-httpListenerConfig" path="/console/*" doc:name="HTTP" />
        <apikit:console config-ref="api-config" doc:name="APIkit Console" />
    </flow>
    
    <flow name="get:/validate:api-config">
        <logger level="INFO" doc:name="Validates the token. APIs call this to verify that token is authentic."/>
        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
        <flow-ref name="validateToken" doc:name="validateToken"/>
    </flow>
    
    <flow name="get:/userinfo:api-config">
        <logger level="INFO" doc:name="Retrieves user details"/>
        <set-variable variableName="access_token" value="#[message.inboundProperties.authorization.substring(7)]" doc:name="set var access_token"/>
        <flow-ref name="validateAccessToken" doc:name="validateAccessToken"/>
        <http:request config-ref="identity-service" path="/users/{id}" method="GET" doc:name="GET user info">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.accessTokenClaims.sub]"/>
            </http:request-builder>
        </http:request>
    </flow>
    <flow name="get:/jwks.json:api-config">
        <parse-template location="${jwt.public.keys.path}" doc:name="JWK Set"/>
    </flow>
    
    <flow name="get:/.well-known/openid-configuration:api-config">
        <set-payload value="#[server.host]" doc:name="hostname"/>
        <dw:transform-message doc:name="build response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
   "issuer":     p('jwt.issuer'),
   "authorization_endpoint": "https://" ++ payload ++ "/" ++ p('oauth.authorization.endpoint.path'),
   "token_endpoint":         "https://" ++ payload ++ "/" ++ p('oauth.access.token.endpoint.path'),
   "token_endpoint_auth_methods_supported": ["client_secret_basic", "client_secret_post"],
   "jwks_uri":  "https://server.example.com/jwks.json",
   "scopes_supported": p('oauth.scopes') splitBy " " default [],
   "response_types_supported": ["code", "token"],
   "subject_types_supported": ["public", "pairwise"],
   "id_token_signing_alg_values_supported": [ p('jwt.signing.algorithm')],
   "id_token_encryption_alg_values_supported": ["DIR"],
   "id_token_encryption_enc_values_supported": [p('jwt.encryption.algorithm')],
   "ui_locales_supported":["en-US"]
  }]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    
    <sub-flow name="validateAccessToken">
        <enricher source="#[payload]" target="#[flowVars.decryptionKeyString]" doc:name="var decryptionKeyString">
            <parse-template location="${jwt.encryption.key.path}" doc:name="load AES key"/>
        </enricher>
        <enricher source="#[payload]" target="#[flowVars.verificationKeyString]" doc:name="var verificationKeyString">
            <parse-template location="${jwt.signing.key.path}" doc:name="load RSA key"/>
        </enricher>
        <enricher source="#[payload]" target="#[flowVars.accessTokenClaims]" doc:name="var accessTokenClaims">
            <scripting:transformer returnClass="java.util.Map" doc:name="Validate access_token">
                <scripting:script engine="Groovy"><![CDATA[import org.jose4j.jwt.JwtClaims;
import org.jose4j.keys.HmacKey;
import org.jose4j.keys.resolvers.HttpsJwksVerificationKeyResolver;
import org.jose4j.jwk.HttpsJwks;
import org.jose4j.jwk.RsaJsonWebKey;
import org.jose4j.jwk.JsonWebKey;
import org.jose4j.jwk.OctetSequenceJsonWebKey;
import org.jose4j.jwt.consumer.JwtConsumer;
import org.jose4j.jwt.consumer.JwtConsumerBuilder;
import org.jose4j.jwa.AlgorithmConstraints;
import org.jose4j.jwa.AlgorithmConstraints.ConstraintType;
import java.security.Key;

decryptionKey = (OctetSequenceJsonWebKey) JsonWebKey.Factory.newJwk(flowVars.decryptionKeyString);

verificationKey = (RsaJsonWebKey) JsonWebKey.Factory.newJwk(flowVars.verificationKeyString);
    
JwtConsumer jwtConsumer = new JwtConsumerBuilder()
				.setRequireExpirationTime()
				.setJwsAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, "RS256"))
				.setJweAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, "dir"))
				.setMaxFutureValidityInMinutes(30*24*60)
				.setExpectedIssuer('${jwt.issuer}')
				.setVerificationKey(verificationKey.getRsaPublicKey())
				.setDecryptionKey(decryptionKey.getKey())
				.build();
		
JwtClaims jwtClaims = jwtConsumer.processToClaims(flowVars.access_token);
return jwtClaims.getClaimsMap();]]></scripting:script>
            </scripting:transformer>
        </enricher>
    </sub-flow>
    
    <apikit:mapping-exception-strategy name="api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
