<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:oauth2-provider="http://www.mulesoft.org/schema/mule/oauth2-provider"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
	xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
	xmlns:ss="http://www.springframework.org/schema/security" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/current/mule-spring-security.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/oauth2-provider http://www.mulesoft.org/schema/mule/oauth2-provider/current/mule-oauth2-provider.xsd">

	<!-- register a security manager within the mule application -->
	<mule-ss:security-manager name="multiple-users-security-manager" doc:name="Spring Security Provider">
		<mule-ss:delegate-security-provider name="externalIdResourceOwnerSecurityProvider" delegate-ref="resourceOwnerAuthenticationManager" />
	</mule-ss:security-manager>

	<!-- requests external auth service to validate user credentials -->
	<spring:beans>
		<spring:bean name="tokenGeneratorOpenIdStrategy" class="org.mule.templates.oauth2.openid.TokenGeneratorOpenIdStrategy" >
			<spring:property name="issuer" value="${jwt.issuer}" />
			<spring:property name="signingKeyPath" value="${jwt.signing.key.path}" />
			<spring:property name="encryptionKeyPath" value="${jwt.encryption.key.path}" />
			<spring:property name="ttlSeconds" value="${oauth.token.ttl}" />
			<spring:property name="signingAlgorithm" value="${jwt.signing.algorithm}" />
			<spring:property name="encryptionAlgorithm" value="${jwt.encryption.algorithm}" />
		</spring:bean>
		<spring:bean name="jwtTokenStore" class="org.mule.templates.oauth2.openid.OpenIdTokenStore" >
			<spring:property name="issuer" value="${jwt.issuer}" />
			<spring:property name="encryptionKeyPath" value="${jwt.encryption.key.path}" />
			<spring:property name="publicKeysUrl" value="${jwt.public.keys.url}" />
		</spring:bean>		
		<spring:bean class="org.mule.templates.oauth2.ExternalIdResourceOwnerAuthProvider" id="externalIdResourceOwnerAuthProvider" scope="singleton">
			<spring:property name="externalIdHttpAuthService" ref="externalIdHttpAuthService" />
		</spring:bean>
		<spring:bean class="org.mule.templates.oauth2.ExternalIdHttpAuthService" id="externalIdHttpAuthService" scope="singleton">
			<spring:property name="httpHost" value="${http.external.service.host}" />
			<spring:property name="httpPort" value="${http.external.service.port}" />
			<spring:property name="httpPath" value="${http.external.service.path}" />
		</spring:bean>
		
		<ss:authentication-manager id="resourceOwnerAuthenticationManager">
			<ss:authentication-provider ref="externalIdResourceOwnerAuthProvider" />
		</ss:authentication-manager>
	</spring:beans>

	<!-- store oauth client-specific info -->
	<api-platform-gw:client-store id="multiple-users-client-store" doc:name="Client Store" />

	<!-- validates incoming client credentials -->
	<api-platform-gw:client-security-provider id="multiple-users-client-security-provider" doc:name="Security Provider" />

	<!-- oauth provider settings -->
	<oauth2-provider:config name="oauth2-provider"
		providerName="${oauth.provider.name}"
		resourceOwnerSecurityProvider-ref="externalIdResourceOwnerSecurityProvider"
		tokenGeneratorStrategy-ref="tokenGeneratorOpenIdStrategy"
		clientSecurityProvider-ref="multiple-users-client-security-provider"
		clientStore-ref="multiple-users-client-store" defaultScopes="${oauth.scopes}"
		tokenStore-ref="jwtTokenStore"
		supportedGrantTypes="${oauth.supported.grant.types}"
		authorizationEndpointPath="${oauth.authorization.endpoint.path}"
		accessTokenEndpointPath="${oauth.access.token.endpoint.path}"
		 listenerConfig-ref="api-httpListenerConfig"
		tokenTtlSeconds="${oauth.token.ttl}" doc:name="OAuth provider module" loginPage="${login.page.path}">
	</oauth2-provider:config>

</mule>
